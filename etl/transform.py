# -*- coding: utf-8 -*-
"""transform.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rb-R6rGG6KQhW7dGPtQLKn2aSXqoB4Ui
"""

import pandas as pd
import numpy as np
import pandera.pandas as pa

from pandera.pandas import Column, DataFrameSchema, Check
from scipy import stats

def transform_data_types(df: pd.DataFrame) -> pd.DataFrame:
  # Числовые типы
  df['Land square feet'] = df['Land square feet'].replace(' -  ', np.nan).astype('float64')
  df['Gross square feet'] = df['Gross square feet'].replace(' -  ', np.nan).astype('float64')
  df['Sale price'] = df['Sale price'].replace(' -  ', np.nan).astype('float64')
  # Строковые типы
  df['Neighborhood'] = df['Neighborhood'].astype('str')
  df['Address'] = df['Address'].astype('str')
  df['Apartment number'] = df['Apartment number'].astype('str')
  df['Building class category'] = df['Building class category'].astype('str')
  df['Building class at present'] = df['Building class at present'].astype('str')
  df['Building class at time of sale'] = df['Building class at time of sale'].astype('str')
  df['Tax class at present'] = df['Tax class at present'].astype('str')
  df['Tax class at time of sale'] = df['Tax class at time of sale'].astype('str')
  df['Ease-ment'] = df['Ease-ment'].astype('str')
  # Категориальные типы
  df['Borough'] = df['Borough'].astype('category')
  # Временные типы
  df['Year built'] = pd.to_datetime(df['Year built'], format='%Y', errors='coerce')
  df['Sale date'] = pd.to_datetime(df['Sale date'], format='%Y-%m-%d %H:%M:%S', errors='coerce')
  return df

def clean_data(df: pd.DataFrame) -> pd.DataFrame:
  missing_values = [' ', '', '-', None, 'nan']
  df = df.replace(missing_values, np.nan)
  return df

def validate_data(df: pd.DataFrame) -> bool:
  # Определяем схему датасета с правилами
  schemaCheck = DataFrameSchema(
  {
    'Borough': Column(
        'category',
        checks=Check.isin([1, 2, 3, 4, 5]),
        nullable=False,
        description="Боро, административная единица Нью-Йорка"
    ),
    'Neighborhood': Column(
        object,
        nullable=False,
        description="Район"
    ),
    'Building class category': Column(
        object,
        nullable=False,
        description="Класс здания"
    ),
    'Tax class at present': Column(
        object,
        checks=Check.isin(['1', '1A', '1B', '1C', '2', '2A', '2B', '2C', '3', '4']),
        nullable=True,
        description="Класс налога в настоящее время"
    ),
    'Building class at present': Column(
        object,
        nullable=True,
        description="Класс здания в настоящее время"
    ),
    'Tax class at time of sale': Column(
        object,
        checks=Check.isin(['1', '1A', '1B', '1C', '2', '2A', '2B', '2C', '3', '4']),
        nullable=False,
        description="Класс налога на момент продажи"
    ),
    'Building class at time of sale': Column(
        object,
        nullable=True,
        description="Класс здания на момент продажи"
    ),
    'Block': Column(
        int,
        checks=Check.greater_than(0),
        nullable=False
    ),
    'Lot': Column(
        int,
        checks=Check.greater_than(0),
        nullable=False
    ),
    'Residential units': Column(
        int,
        nullable=False
    ),
    'Commercial units': Column(
        int,
        nullable=False
    ),
    'Total units': Column(
        int,
        nullable=False
    ),
    'Address': Column(
        object,
        nullable=False
    ),
    'Apartment number': Column(
        object,
        nullable=True
    ),
    'Zip code': Column(
        int,
        nullable=False
    ),
    'Land square feet': Column(
        float,
        nullable=True
    ),
    'Gross square feet': Column(
        float,
        nullable=True
    ),
    'Sale price': Column(
        float,
        nullable=True
    ),
    'Year built': Column(
        'datetime64',
        checks=[
            Check.less_than_or_equal_to(pd.Timestamp.now()),  # Дата не в будущем
        ],
        nullable=True
    ),
    'Sale date': Column(
        'datetime64',
        checks=[
            Check.less_than_or_equal_to(pd.Timestamp.now()),  # Дата не в будущем
        ],
        nullable=True
    ),
    'Ease-ment': Column(
        object,
        nullable=True
    )
  },
    strict=True,  # Не допускаем лишних столбцов
    coerce=True   # Автоматически приводить типы где возможно
  )
  print("Валидация данных")
  try:
    validated_df = schemaCheck.validate(df, lazy=True)
    print("Валидация пройдена успешно!")
    print(f"Количество провалидированных записей: {len(validated_df)}")
  except pa.errors.SchemaErrors as e:
    print("Обнаружены ошибки валидации")
    print(f"\nВсего ошибок: {len(e.failure_cases)}")
    print("\nПримеры ошибок:")
    print(e.message)
    print(e.failure_cases.head(20))
    # Продолжаем работу с исходными данными
    validated_df = df.copy()

def convert_to_parquet(df: pd.DataFrame, output_path: str) -> None:
  print("Сохранение обработанных данных\n")
  df.to_parquet(output_path, index=False)
  print(f"Данные сохранены в {output_path}")
